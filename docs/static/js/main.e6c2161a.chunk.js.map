{"version":3,"sources":["App/ErrorBoundary.tsx","App/clients/gh-client.tsx","App/config/gh.tsx","GHRepos/queries/repos.tsx","GHRepos/styled/BottomBar.tsx","GHRepos/styled/ListItem.tsx","GHRepos/styled/SearchBar.tsx","GHRepos/components/RepoItem.tsx","GHRepos/components/RepoList.tsx","GHRepos/components/RepoSearch.tsx","GHRepos/GHRepos.tsx","GHRepos/config/index.tsx","App/App.tsx","index.tsx"],"names":["ErrorBoundary","props","state","hasError","error","info","console","this","children","Component","ghClient","ApolloClient","link","createHttpLink","uri","headers","authorization","process","cache","InMemoryCache","typePolicies","Query","fields","search","relayStylePagination","QUERY_GH_REPOS","gql","emptyRepo","description","forks","totalCount","nameWithOwner","stargazers","url","edgeToRepo","node","forkCount","name","starCount","BottomBar","styled","div","Col","span","FirstCol","Item","SearchBar","RepoItem","title","href","target","rel","role","aria-label","RepoList","items","map","item","key","RepoSearch","defaultValue","inputType","onChange","onChangeDebounced","useCallback","debounce","value","event","currentTarget","type","GHRepos","useState","setSearch","stars","setStars","useQuery","variables","size","notifyOnNetworkStatusChange","loading","data","fetchMore","edges","pageInfo","endCursor","hasNextPage","cursor","hasNext","isEmpty","length","useQueryGHReposData","onClick","App","client","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e6c2161a.chunk.js","sourcesContent":["import React, { Component, ErrorInfo } from 'react';\n\nclass ErrorBoundary extends Component<{}, { hasError: boolean }> {\n  constructor(props: any) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, info: ErrorInfo) {\n    console.error('ErrorBoundary caught an error', error, info);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import { ApolloClient, InMemoryCache, createHttpLink } from '@apollo/client';\nimport { relayStylePagination } from '@apollo/client/utilities';\n\nimport { GH_GRAPHQL_ENDPOINT, GH_TOKEN } from '../config';\n\nexport const ghClient = new ApolloClient({\n  link: createHttpLink({\n    uri: GH_GRAPHQL_ENDPOINT,\n    headers: {\n      authorization: `Bearer ${GH_TOKEN}`,\n    },\n  }),\n  cache: new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          search: relayStylePagination(['query']),\n        },\n      },\n    },\n  }),\n});\n","export const GH_GRAPHQL_ENDPOINT = 'https://api.github.com/graphql';\nexport const GH_TOKEN = process.env.REACT_APP_GH_TOKEN;\n","import { gql } from '@apollo/client';\n\nimport { RepositoryType } from '../types';\n\nexport const QUERY_GH_REPOS = gql`\n  query($search: String!, $size: Int, $cursor: String) {\n    search(query: $search, type: REPOSITORY, first: $size, after: $cursor) {\n      repositoryCount\n      edges {\n        node {\n          ... on Repository {\n            url\n            nameWithOwner\n            description\n            stargazers {\n              totalCount\n            }\n            forks {\n              totalCount\n            }\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n`;\n\nconst emptyRepo: RepositoryType = {\n  description: '',\n  forks: { totalCount: 0 },\n  nameWithOwner: '',\n  stargazers: { totalCount: 0 },\n  url: '',\n};\n\nconst edgeToRepo = ({\n  node: {\n    description,\n    forks: { totalCount: forkCount },\n    nameWithOwner: name,\n    stargazers: { totalCount: starCount },\n    url,\n  } = emptyRepo,\n}) => ({ description, forkCount, name, starCount, url });\n\nexport const useQueryGHReposData = ({\n  search: {\n    edges = [],\n    pageInfo: { endCursor = '', hasNextPage = false } = {},\n  } = {},\n} = {}) => ({\n  cursor: endCursor,\n  hasNext: hasNextPage,\n  isEmpty: edges.length === 0,\n  items: edges.map(edgeToRepo) || [],\n});\n","import styled from 'styled-components';\n\nexport const BottomBar = styled.div`\n  margin: 1rem;\n`;\n","import styled from 'styled-components';\n\nexport const Col = styled.span`\n  flex: 1 0 0;\n`;\n\nexport const FirstCol = styled.span`\n  flex: 5 0 0;\n`;\n\nexport const Item = styled.div`\n  display: flex;\n  justify-content: space-between;\n\n  margin: 1rem;\n  max-width: 36rem;\n`;\n","import styled from 'styled-components';\n\nexport const SearchBar = styled.div`\n  background: white;\n  padding: 0.5rem 1rem;\n  position: sticky;\n  top: 0;\n`;\n","import React, { FunctionComponent } from 'react';\n\nimport { RepoItemType } from '../types';\nimport { Col, FirstCol, Item } from '../styled';\n\nconst RepoItem: FunctionComponent<RepoItemType> = ({\n  description,\n  forkCount,\n  name,\n  starCount,\n  url,\n}) => (\n  <Item>\n    <FirstCol>\n      <a\n        title={description}\n        href={url}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        @{name}\n      </a>\n    </FirstCol>\n    <Col>\n      <span role=\"img\" aria-label=\"star\">\n        üåü\n      </span>{' '}\n      {starCount}\n    </Col>\n    <Col>\n      <span role=\"img\" aria-label=\"fork\">\n        üç¥\n      </span>{' '}\n      {forkCount}\n    </Col>\n  </Item>\n);\n\nexport default RepoItem;\n","import React, { FunctionComponent } from 'react';\n\nimport { RepoItemType } from '../types';\nimport RepoItem from './RepoItem';\n\ntype RepoListProps = {\n  items: Array<RepoItemType>;\n};\n\nconst RepoList: FunctionComponent<RepoListProps> = ({ items }) => (\n  <div>\n    {items.map(item => (\n      <RepoItem {...item} key={item.name} />\n    ))}\n  </div>\n);\n\nexport default RepoList;\n","import React, { FunctionComponent, useCallback } from 'react';\nimport { debounce } from 'ts-debounce';\n\ntype RepoSearchProps = {\n  defaultValue?: string;\n  inputType?: string;\n  onChange?(value: string): void;\n};\n\nconst RepoSearch: FunctionComponent<RepoSearchProps> = ({\n  defaultValue,\n  inputType,\n  onChange,\n}) => {\n  const onChangeDebounced = useCallback(\n    debounce(value => onChange && onChange(value), 200),\n    []\n  );\n\n  return (\n    <input\n      defaultValue={defaultValue}\n      onChange={event => {\n        onChangeDebounced(event.currentTarget.value);\n      }}\n      type={inputType}\n    />\n  );\n};\n\nexport default RepoSearch;\n","import React, { useState } from 'react';\nimport { useQuery } from '@apollo/client';\n\nimport { INITIAL_SEARCH, INITIAL_STARS, PAGE_SIZE } from './config';\nimport { QUERY_GH_REPOS, useQueryGHReposData } from './queries';\nimport { BottomBar, Item, SearchBar } from './styled';\n\nimport RepoList from './components/RepoList';\nimport RepoSearch from './components/RepoSearch';\n\nexport const GHRepos = () => {\n  const [search, setSearch] = useState(INITIAL_SEARCH);\n  const [stars, setStars] = useState(INITIAL_STARS);\n\n  const { loading, error, data, fetchMore } = useQuery(QUERY_GH_REPOS, {\n    variables: { search: `${search} stars:>${stars}`, size: PAGE_SIZE },\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const { cursor, isEmpty, hasNext, items } = useQueryGHReposData(data);\n\n  return (\n    <>\n      <SearchBar>\n        Search: <RepoSearch defaultValue={search} onChange={setSearch} /> with{' '}\n        <RepoSearch\n          defaultValue={stars}\n          onChange={setStars}\n          inputType=\"number\"\n        />{' '}\n        stars\n      </SearchBar>\n      {error ? (\n        <p>Query error :(</p>\n      ) : (\n        <>\n          {isEmpty && !loading ? (\n            <Item>No results</Item>\n          ) : (\n            <RepoList items={items} />\n          )}\n          <BottomBar>\n            {loading\n              ? 'Loading repos...'\n              : hasNext && (\n                  <button\n                    onClick={() =>\n                      fetchMore({\n                        variables: {\n                          cursor,\n                        },\n                      })\n                    }\n                  >\n                    More\n                  </button>\n                )}\n          </BottomBar>\n        </>\n      )}\n    </>\n  );\n};\n","export const INITIAL_SEARCH = 'react';\nexport const INITIAL_STARS = '10000';\nexport const PAGE_SIZE = 10;\n","import React from 'react';\nimport ErrorBoundary from './ErrorBoundary';\n\nimport { ApolloProvider } from '@apollo/client';\nimport { ghClient } from './clients';\n\nimport { GHRepos } from '../GHRepos';\n\nconst App = () => (\n  <ErrorBoundary>\n    <ApolloProvider client={ghClient}>\n      <GHRepos />\n    </ApolloProvider>\n  </ErrorBoundary>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App/App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}